     1                                  %include "io64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C6460620            <1> .l1      mov    byte[rsi+6],' '
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4 00000000 496E70757420372A33-         InputMsg dq "Input 7*3 matrix: ",10
     4 00000009 206D61747269783A20-
     4 00000012 0000000000000A0000-
     4 0000001B 0000000000         
     5                                      lenInput equ $-InputMsg
     6 00000020 596F7572206D617472-         OutMsg dq "Your matrix: ",10
     6 00000029 69783A200000000A00-
     6 00000032 000000000000       
     7                                      lenOut equ $-OutMsg
     8 00000038 0A00000000000000            DevMsg dq "",10  
     9                                      lenDev equ $-DevMsg
    10                                  
    11 00000040 45616368206C696E65-         err_line dq "Each line should have exactly 3 numbers divided by spaces", 10
    11 00000049 2073686F756C642068-
    11 00000052 617665206578616374-
    11 0000005B 6C792033206E756D62-
    11 00000064 657273206469766964-
    11 0000006D 656420627920737061-
    11 00000076 636573000000000000-
    11 0000007F 000A00000000000000 
    12                                      err_line_len equ $-err_line
    13                                  
    14 00000088 4F6E6C79206E756D62-         err_num dq "Only numbers and spaces can be entered", 10
    14 00000091 65727320616E642073-
    14 0000009A 70616365732063616E-
    14 000000A3 20626520656E746572-
    14 000000AC 656400000A00000000-
    14 000000B5 000000             
    15                                      err_num_len equ $-err_num
    16                                  
    17 000000B8 00<rep 20h>                 input times 32  db 0
    18                                      input_len equ $-input
    19                                  
    20 000000D8 0000000000000000-           matrix times 21 dq 0
    20 000000D8 <rep 15h>          
    21                                  
    22 00000180 020000000000000003-         A	dq	2,3,1
    22 00000189 000000000000000100-
    22 00000192 000000000000       
    23 00000198 0600000000000000F8-     		dq	6,-8,5
    23 000001A1 FFFFFFFFFFFFFF0500-
    23 000001AA 000000000000       
    24 000001B0 060000000000000003-     		dq	6,3,1
    24 000001B9 000000000000000100-
    24 000001C2 000000000000       
    25 000001C8 080000000000000004-             dq	8,4,7
    25 000001D1 000000000000000700-
    25 000001DA 000000000000       
    26 000001E0 0300000000000000FF-             dq	3,-1,8
    26 000001E9 FFFFFFFFFFFFFF0800-
    26 000001F2 000000000000       
    27 000001F8 030000000000000001-             dq	3,1,6
    27 00000201 000000000000000600-
    27 0000020A 000000000000       
    28 00000210 080000000000000006-             dq	8,6,7
    28 00000219 000000000000000700-
    28 00000222 000000000000       
    29                                  
    30                                  
    31                                  section .bss               
    32 00000000 <res Ah>                    InBuf   resb    10            
    33                                      lenIn   equ     $-InBuf
    34 0000000A ????????                    X resd 1
    35 0000000E ????????????????            res resq 1
    36                                  
    37                                  section .text         
    38                                      global  _start
    39                                  _start:
    40                                  
    41 000000A9 B801000000                  mov rax, 1
    42 000000AE BF01000000                  mov rdi, 1
    43 000000B3 48BE-                       mov rsi, InputMsg
    43 000000B5 [0000000000000000] 
    44 000000BD BA20000000                  mov rdx, lenInput
    45 000000C2 0F05                        syscall
    46                                  
    47                                  
    48                                  
    49                                  
    50 000000C4 B907000000                  mov rcx,7
    51 000000C9 4831FF                      xor rdi, rdi
    52                                  read_line:
    53 000000CC 51                          push rcx
    54 000000CD 57                          push rdi
    55                                  
    56 000000CE B800000000                  mov rax, 0 ; системная функция 0 (read)
    57 000000D3 BF00000000                  mov rdi, 0 ; дескриптор файла stdin=0
    58 000000D8 48BE-                       mov rsi, input ; адрес вводимой строки
    58 000000DA [B800000000000000] 
    59 000000E2 BA20000000                  mov rdx, input_len ; длина строки
    60 000000E7 0F05                        syscall ; вызов системной функции
    61                                      
    62 000000E9 5F                          pop rdi
    63                                  
    64 000000EA 4889C1                      mov rcx, rax
    65 000000ED 4831D2                      xor rdx, rdx
    66 000000F0 4D31D2                      xor r10, r10
    67                                  process_line:
    68 000000F3 80BA[B8000000]0A            cmp byte[input + rdx], 10
    69 000000FA 7417                        je process_number
    70                                  
    71 000000FC 80BA[B8000000]20            cmp byte[input + rdx], ' '
    72 00000103 7541                        jne next
    73                                  
    74 00000105 C682[B8000000]0A            mov byte[input + rdx], 10
    75 0000010C 4939D2                      cmp r10, rdx
    76 0000010F 7502                        jne process_number
    77 00000111 EB33                        jmp next
    78                                  
    79                                  process_number:
    80 00000113 52                          push rdx
    81 00000114 E839FFFFFF                  call StrToInt64
    82 00000119 4883FB00                    cmp rbx, 0   ;проверка на букву
    83 0000011D 0F8515010000                jne error_num 
    84 00000123 4883FF15                    cmp rdi, 21
    85 00000127 0F8DEE000000                jge error_line ;;проверка на лишнее число
    86                                  
    87 0000012D 488904FD[D8000000]          mov [matrix + 8*rdi], rax
    88 00000135 48FFC7                      inc rdi
    89                                  
    90 00000138 5A                          pop rdx
    91 00000139 4989D2                      mov r10, rdx
    92 0000013C 49FFC2                      inc r10
    93 0000013F 498DB2[B8000000]            lea rsi, [input + r10]
    94                                  
    95                                  next:
    96 00000146 48FFC2                      inc rdx
    97 00000149 E2A8                        loop process_line
    98                                  
    99 0000014B 59                          pop rcx
   100                                  
   101 0000014C B803000000                  mov rax, 3
   102 00000151 4829C8                      sub rax, rcx
   103 00000154 48FFC0                      inc rax
   104 00000157 52                          push rdx
   105 00000158 BA03000000                  mov rdx, 3
   106 0000015D 48F7E2                      mul rdx
   107 00000160 5A                          pop rdx
   108                                  
   109 00000161 48FFC9                      dec rcx
   110 00000164 4883F900                    cmp rcx, 0
   111 00000168 0F855EFFFFFF                jne read_line
   112                                  
   113                                  
   114                                  
   115                                  ;основная программа
   116 0000016E BB00000000                  mov rbx, 0
   117 00000173 B90B000000                  mov rcx,11
   118 00000178 4831FF                      xor rdi, rdi
   119                                  
   120                                  
   121                                  read:
   122 0000017B 48C704DD[D8000000]-         mov qword[rbx*8+matrix], 0
   122 00000183 00000000           
   123 00000187 4883C302                    add rbx, 2
   124 0000018B E2EE                        loop read
   125                                  
   126                                  
   127 0000018D B801000000                  mov rax, 1
   128 00000192 BF01000000                  mov rdi, 1
   129 00000197 48BE-                       mov rsi, OutMsg
   129 00000199 [2000000000000000] 
   130 000001A1 BA18000000                  mov rdx, lenOut
   131 000001A6 0F05                        syscall
   132                                  
   133                                  ;вывод матрицы
   134 000001A8 B907000000                  mov rcx,7
   135 000001AD BB00000000                  mov rbx,0
   136 000001B2 4831FF                      xor rdi, rdi
   137                                  out_line:
   138 000001B5 51                          push rcx
   139 000001B6 B903000000                  mov rcx,3
   140                                  
   141                                  out_num: 
   142 000001BB 488B04DD[D8000000]              mov rax,[rbx*8+matrix]
   143                                  
   144 000001C3 48BE-                           mov rsi, InBuf
   144 000001C5 [0000000000000000] 
   145 000001CD E82EFEFFFF                      call IntToStr64
   146                                  
   147 000001D2 51                              push rcx
   148                                          
   149                                  
   150                                      ; write
   151 000001D3 4889C2                        mov rdx, rax
   152 000001D6 B801000000                    mov rax, 1    ; системная функция 1 (write)
   153 000001DB BF01000000                    mov rdi, 1    ; дескриптор файла stdout=1
   154 000001E0 0F05                          syscall
   155                                          
   156 000001E2 59                              pop rcx
   157 000001E3 BF00000000                      mov rdi, 0   
   158                                  
   159 000001E8 4883F901                        cmp rcx,1
   160                                  
   161                                  
   162 000001EC 48FFC3                          inc rbx
   163 000001EF E2CA                            loop out_num
   164                                  
   165 000001F1 51                              push rcx
   166 000001F2 B801000000                      mov rax,1
   167 000001F7 BF01000000                      mov rdi,1
   168 000001FC 48BE-                           mov rsi, DevMsg ; адрес выводимой строки
   168 000001FE [3800000000000000] 
   169 00000206 BA08000000                      mov rdx, lenDev ; длина строки
   170 0000020B 0F05                            syscall
   171 0000020D 59                              pop rcx
   172                                  
   173                                  
   174 0000020E 59                              pop rcx
   175 0000020F E2A4                            loop out_line
   176                                  
   177                                   
   178                                  
   179                                  
   180                                  exit:
   181 00000211 4831FF                      xor rdi, rdi
   182 00000214 B83C000000                  mov rax, 60
   183 00000219 0F05                        syscall
   184                                  
   185                                  error_line:
   186 0000021B B801000000                  mov rax, 1
   187 00000220 BF01000000                  mov rdi, 1   
   188 00000225 48BE-                       mov rsi, err_line
   188 00000227 [4000000000000000] 
   189 0000022F BA48000000                  mov rdx, err_line_len
   190 00000234 0F05                        syscall
   191 00000236 EBD9                        jmp exit
   192                                  
   193                                  error_num:
   194 00000238 B801000000                  mov rax, 1
   195 0000023D BF01000000                  mov rdi, 1   
   196 00000242 48BE-                       mov rsi, err_num
   196 00000244 [8800000000000000] 
   197 0000024C BA30000000                  mov rdx, err_num_len
   198 00000251 0F05                        syscall
   199 00000253 EBBC                        jmp exit

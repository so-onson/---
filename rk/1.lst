     1                                  %include "io64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  section .data
     3 00000000 496E70757420737472-         InputMsg dq "Input string: ",10  
     3 00000009 696E673A2000000A00-
     3 00000012 000000000000       
     4                                      lenInput equ $-InputMsg
     5                                      ; Max dw 0
     6                                  section .bss
     7 00000000 <res 1Eh>                   StrInp resb 30
     8                                      lenStr equ $-StrInp
     9 00000000 <rep Ah>                    StrNew times 10 db ''
    10                                  section .text
    11                                  global  _start
    12                                  _start:
    13                                  
    14 000000A9 B801000000                  mov rax, 1
    15 000000AE BF01000000                  mov rdi, 1
    16 000000B3 48BE-                       mov rsi, InputMsg
    16 000000B5 [0000000000000000] 
    17 000000BD BA18000000                  mov rdx, lenInput
    18 000000C2 0F05                        syscall
    19                                  
    20                                      ; read
    21 000000C4 B800000000                  mov rax, 0  
    22 000000C9 BF00000000                  mov rdi, 0      
    23 000000CE 48BE-                       mov rsi, StrInp  
    23 000000D0 [0000000000000000] 
    24 000000D8 BA1E000000                  mov rdx, lenStr  
    25 000000DD 0F05                        syscall        
    26                                  
    27                                  
    28                                  ;основная часть
    29                                  
    30                                  
    31                                  ;подсчет длины введенной строки до кода Enter
    32 000000DF 488D3C25[00000000]      lea rdi,[StrInp] 
    33 000000E7 B91E000000              mov rcx,lenStr
    34 000000EC B00A                    mov al,0Ah
    35 000000EE F2AE                    repne scasb; ищем код Enter
    36 000000F0 B81E000000              mov rax,30
    37 000000F5 4829C8                  sub rax,rcx
    38 000000F8 4889C1                  mov rcx,rax
    39 000000FB C681[FFFFFFFF]20        mov byte[rcx+StrInp-1],' ' ;добавление пробела в конец строки
    40                                  
    41                                  ; mov [lenStr],rcx
    42                                  
    43 00000102 BA00000000                  mov edx,0
    44 00000107 BB00000000                  mov ebx,0
    45                                      ; mov ecx, lenStr
    46                                  
    47                                  cycl:
    48 0000010C 678DB2[00000000]            lea esi, [StrInp + edx]
    49 00000113 B020                        mov al,' '
    50 00000115 673882[00000000]            cmp [StrInp + edx], al
    51 0000011C 7402                        je probel
    52 0000011E EB04                        jmp next
    53                                  
    54                                  probel: 
    55 00000120 FFC3                        inc ebx
    56 00000122 EB00                        jmp next
    57                                  next: 
    58 00000124 FFC2                        inc edx
    59 00000126 E2E4                        loop cycl
    60                                  
    61                                  
    62 00000128 89D8                        mov eax, ebx
    63                                  
    64 0000012A E8D1FEFFFF                  call IntToStr64
    65                                  
    66 0000012F 4889C2                      mov rdx,rax
    67 00000132 B801000000                  mov rax,1
    68 00000137 BF01000000                  mov rdi,1
    69 0000013C 0F05                        syscall
    70                                   
    71                                  ;стараемся посчитать произведение
    72                                      
    73 0000013E 89D9                        mov ecx, ebx
    74                                      ; mov ebx, ecx
    75                                  cycl1:
    76 00000140 B020                        mov al, ' '
    77 00000142 678DB2[00000000]            lea esi,[StrInp+edx]
    78 00000149 673882[00000000]            cmp [StrInp+edx], al
    79                                  
    80 00000150 740D                        je probel1
    81 00000152 FFC2                        inc edx
    82 00000154 678DBA[1E000000]            lea edi, [StrNew + edx]
    83 0000015B F3A4                        repe movsb
    84 0000015D EBE1                        jmp cycl1
    85                                  
    86                                  probel1:
    87 0000015F FFC2                        inc edx ;?
    88 00000161 8B3425[1E000000]            mov esi, [StrNew]
    89 00000168 E8E5FEFFFF                  call StrToInt64  ;в eax число 
    90 0000016D EB00                        jmp cycl2
    91                                  
    92                                  cycl2:
    93 0000016F B820000000                  mov eax, ' '
    94 00000174 8D3C25[00000000]            lea edi, [StrInp]
    95 0000017B 01DF                        add edi, ebx
    96 0000017D 39C7                        cmp edi, eax
    97 0000017F 740D                        je probel2
    98                                  
    99 00000181 FFCB                        dec ebx
   100                                      ;jmp cycl2
   101 00000183 678DBB[1E000000]            lea edi, [StrNew+ebx]
   102 0000018A F3A4                        repe movsb
   103 0000018C EBE1                        jmp cycl2
   104                                  
   105                                  probel2:
   106 0000018E FFCB                        dec ebx
   107 00000190 4989C0                      mov r8,rax
   108 00000193 8B3425[1E000000]            mov esi, [StrNew]
   109 0000019A E8B3FEFFFF                  call StrToInt64  ;в eax число 
   110 0000019F 49F7E8                      imul r8
   111 000001A2 E859FEFFFF                  call IntToStr64
   112 000001A7 52                          push rdx
   113 000001A8 4889C2                      mov rdx,rax
   114 000001AB B801000000                  mov rax,1
   115 000001B0 BF01000000                  mov rdi,1
   116 000001B5 0F05                        syscall
   117 000001B7 5A                          pop rdx
   118                                  
   119 000001B8 E286                    loop cycl1
   120                                  
   121                                  
   122                                  exit:
   123 000001BA 4831FF                      xor rdi, rdi
   124 000001BD B83C000000                  mov rax, 60
   125 000001C2 0F05                        syscall

     1                                  %include "io64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6], 10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data              
     4 00000000 496E70757420332077-     InpMsg db "Input 3 words: ",10  
     4 00000009 6F7264733A200A     
     5                                  lenInp equ $-InpMsg
     6                                  
     7 00000010 616263646566207177-     Stroka db "abcdef qwerty abcdef",10
     7 00000019 657274792061626364-
     7 00000022 65660A             
     8                                  lenStroka equ $-Stroka
     9 00000025 727272727272207272-     Stroka2 db "rrrrrr rrrrrr rrrrrr",10
     9 0000002E 727272722072727272-
     9 00000037 72720A             
    10                                  lenStroka2 equ $-Stroka2
    11 0000003A 0300                    Dlina dw 3
    12                                  
    13                                  section .bss             
    14 00000000 <res Ah>                InBuf   resb    10            
    15                                  lenIn   equ     $-InBuf
    16                                  
    17                                  
    18 0000000A <res 28h>               StrokaInp resw 20
    19                                  lenStr   equ     $-StrokaInp
    20                                  
    21                                  
    22                                  section .text         
    23                                          global  _start
    24                                  _start:
    25 000000A9 B801000000                    mov rax, 1    ; системная функция 1 (write)
    26 000000AE BF01000000                    mov rdi, 1    ; дескриптор файла stdout=1
    27 000000B3 48BE-                         mov rsi, InpMsg ; адрес выводимой строки
    27 000000B5 [0000000000000000] 
    28 000000BD BA10000000                    mov rdx, lenInp ; длина строки
    29 000000C2 0F05                          syscall       ; вызов системной функции
    30                                  
    31                                  
    32                                      ; read
    33 000000C4 B800000000                    mov rax, 0      ; системная функция 0 (read)
    34 000000C9 BF00000000                    mov rdi, 0      ; дескриптор файла stdin=0
    35 000000CE 48BE-                         mov rsi, StrokaInp  ; адрес вводимой строки
    35 000000D0 [0A00000000000000] 
    36 000000D8 BA28000000                    mov rdx, lenStr  ; длина строки
    37 000000DD 0F05                          syscall         ; вызов системной функции
    38                                  
    39                                  
    40                                  
    41 000000DF 488D3C25[0A000000]      lea rdi,[StrokaInp] ; загружаем адрес строки в edi
    42 000000E7 66BA0000                mov dx,0 ; обнуляем счетчик длины слова
    43                                  
    44                                  
    45                                  ;алгоритм замены во втором слове ecx=2
    46 000000EB B903000000              mov ecx,3
    47                                  
    48 000000F0 51                      cycl:  push rcx
    49 000000F1 B807000000                  mov eax,7
    50 000000F6 F7E9                        imul ecx
    51 000000F8 89C2                        mov edx,eax
    52 000000FA 83EA07                      sub edx,7 
    53                                  
    54                                  
    55 000000FD BB06000000                  mov ebx,6
    56 00000102 29CB                        sub ebx,ecx ;4 = ebx
    57                                  
    58 00000104 678DB2[0A000000]            lea esi, [StrokaInp+edx]
    59 0000010B 678DBC1A[25000000]          lea edi, [Stroka2+edx+ebx]
    60                                  
    61                                  
    62 00000113 F3A4                        repe movsb
    63                                  
    64                                  ;     pop rcx
    65                                  
    66                                  ;     push rcx
    67                                  
    68                                  
    69 00000115 678DB2[10000000]            lea esi, [StrokaInp+edx+6]
    70 0000011C 29DE                        sub esi,ebx
    71 0000011E 678DBA[25000000]            lea edi, [Stroka2+edx] 
    72 00000125 89D9                        mov ecx, ebx; ecx=4
    73 00000127 F3A4                        repe movsb
    74 00000129 59                      pop rcx
    75 0000012A E2C4                        loop cycl
    76                                  
    77                                  
    78                                  
    79                                  
    80 0000012C B801000000                    mov rax, 1    ; системная функция 1 (write)
    81 00000131 BF01000000                    mov rdi, 1    ; дескриптор файла stdout=1
    82 00000136 48BE-                         mov rsi, Stroka2 ; адрес выводимой строки
    82 00000138 [2500000000000000] 
    83 00000140 BA15000000                    mov rdx, lenStroka2 ; длина строки
    84 00000145 0F05                          syscall       ; вызов системной функции
    85                                  
    86                                  
    87                                  exit:
    88 00000147 4831FF                      xor rdi, rdi
    89 0000014A B83C000000                  mov rax, 60
    90 0000014F 0F05                        syscall

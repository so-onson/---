     1                                  %include "io64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                    section .data              
     4 00000000 507265737320456E74-           ExitMsg db "Press Enter to Exit",10 
     4 00000009 657220746F20457869-
     4 00000012 740A               
     5                                        lenExit equ $-ExitMsg
     6                                  
     7                                        ; A dw -30
     8                                        ; B dw 21
     9                                  
    10 00000014 0500                          A dw 5
    11 00000016 FBFF                          B dw -5
    12                                  
    13                                        ; val1 db 255
    14                                        ; chart dw 256
    15                                        ; lue3 dw -128
    16                                        ; v5 db 10h
    17                                        ;    db 100101B
    18                                        ; beta db 23,23h,0ch
    19                                        ; sdk db "Hello",10
    20                                        ; min dw -32767
    21                                        ; ar dd 12345678h
    22                                        ; valar times 5 db
    23                                  
    24                                        ; strok db "Sofia", 10
    25                                        ; st db "Софья", 10
    26                                  
    27                                        ; num dw 25
    28                                        ; num2 dd -35
    29                                  
    30                                        ; num3 dw 37
    31                                        ; num4 dw 9472
    32                                  
    33                                        ; F1 dw 65535
    34                                        ; F2 dd 65535
    35                                  
    36                                    section .bss               
    37 00000000 <res Ah>                      InBuf   resb    10
    38                                        lenIn   equ     $-InBuf
    39                                  
    40 0000000A ????????                      X resd 1
    41                                  
    42 0000000E <res 14h>                     alu resw 10
    43 00000022 ??????????                    f1 resb 5
    44                                  
    45                                    section .text ; сегмент кода
    46                                      global _start
    47                                      _start:
    48                                  
    49 000000A9 8B0425[14000000]              mov eax,[A] ; загрузить число A в регистр EAX
    50                                        ; add eax,5   ; сложить EAX и 5, результат в EAX
    51                                        ; sub eax,[B] ; вычесть число B, результат в EAX
    52                                        ; mov [X],eax ; сохранить результат в памяти
    53 000000B0 8B0425[16000000]              mov eax, [B]
    54                                  
    55                                        ; mov dword[F1], 1
    56                                        ; add word[F1], 1
    57                                  
    58                                  
    59 000000B7 BE[00000000]                  mov esi,InBuf
    60                                        ; mov ax, [X]
    61 000000BC 98                            cwde
    62 000000BD E83EFFFFFF                    call IntToStr64
    63                                  
    64                                  
    65                                      ; write
    66 000000C2 4889C2                        mov rdx, rax
    67 000000C5 B801000000                    mov rax, 1    ; системная функция 1 (write)
    68 000000CA BF01000000                    mov rdi, 1    ; дескриптор файла stdout=1
    69 000000CF 0F05                          syscall
    70 000000D1 B801000000                    mov rax, 1    ; системная функция 1 (write)
    71 000000D6 BF01000000                    mov rdi, 1    ; дескриптор файла stdout=1
    72 000000DB 48BE-                         mov rsi, ExitMsg ; адрес выводимой строки
    72 000000DD [0000000000000000] 
    73 000000E5 BA14000000                    mov rdx, lenExit ; длина строки
    74 000000EA 0F05                          syscall       ; вызов системной функции
    75                                  
    76                                      ; read
    77 000000EC B800000000                    mov rax, 0      ; системная функция 0 (read)
    78 000000F1 BF00000000                    mov rdi, 0      ; дескриптор файла stdin=0
    79 000000F6 48BE-                         mov rsi, InBuf  ; адрес вводимой строки
    79 000000F8 [0000000000000000] 
    80 00000100 BA0A000000                    mov rdx, lenIn  ; длина строки
    81 00000105 0F05                          syscall         ; вызов системной функции
    82                                        
    83                                      ; exit
    84 00000107 B83C000000                    mov rax, 60     ; системная функция 60 (exit)
    85 0000010C 4831FF                        xor rdi, rdi    ; return code 0
    86 0000010F 0F05                          syscall         ; вызов системной функции
